import{I as S}from"./InstallationStep.916efcd3.js";import{_ as k,L as E,R as I,y as O,z as P,A as x,r as b,o as c,c as h,d as m,w as L,F as p,e as s,s as f,C as N,h as _,t as g,v as $,g as A}from"./index.2e5144e1.js";const w=[{title:"Platform",active:!1},{title:"Environment",active:!1},{title:"Variables",active:!0},{title:"Install",active:!1}],T="Set the environment variables and other settings for the installation. You will be able to see and change these values later in the Installed Environments section in the Home. <br><br>If you are not sure about the values, you can leave the default ones.",C={components:{InstallationStep:S,LoadingSpinner:E},data(){return{steps:w,tips:T,portsNotOk:new Map,isLoadingVariables:!1}},computed:{navigation(){return{next:{path:"/install",disabled:!this.areVariablesOk()},back:{path:this.$store.state.editingEnvironment?`/environments/${this.$store.state.installationState.id}`:"/environment-setup",disabled:!1},cancel:{path:this.$store.state.editingEnvironment?`/environments/${this.$store.state.installationState.id}`:"/",disabled:!1}}},variables:{get(){return this.$store.state.installationState.variables},set(e){this.$store.commit("setVariables",e)}},skipImagesAutoupdate:{get(){return this.$store.state.installationState.skipImagesAutoupdate},set(e){this.$store.commit("setSkipImagesAutoupdate",e)}},platform(){return this.$store.state.installationState.platform}},methods:{readEnvFileAndShowVariables(){let e=this.$store.state.installationState.platform;I(e).then(i=>{this.variables=i,O().then(n=>{this.variables.forEach(a=>{let t={};for(let l in a.variables){let o=a.variables[l].replace("${API_HOST_ENV}",n);t[l]=o}a.variables=t});let d=[];for(let a of this.variables)for(let t in a.variables)d.push(this.isPortOk(t,a.variables[t]));Promise.all(d).then(()=>{this.portsNotOk.forEach((a,t)=>{a&&P().then(l=>{this.variables.forEach(v=>{v.variables[t]&&(v.variables[t]=l,this.portsNotOk.set(t,!1))})}).catch(()=>{this.portsNotOk.set(t,!0)})}),setTimeout(()=>{this.isLoadingVariables=!1},1e3)})})})},isPortOk(e,i){if(this.$store.state.editingEnvironment){for(let n of this.$store.state.editingEnvironment.variables)if(n.variables[e]===i)return Promise.resolve()}return e.endsWith("_PORT")&&!e.startsWith("POSTGRESQL")?x(i).then(n=>{this.portsNotOk.set(e,!n)}).catch(()=>{this.portsNotOk.set(e,!0)}):Promise.resolve()},areVariablesOk(){let e=!0;return this.portsNotOk.forEach((i,n)=>{i&&(e=!1)}),!!e}},created(){this.$store.state.installationState.variables||(this.isLoadingVariables=!0,this.readEnvFileAndShowVariables())}},F={class:"variables-main-content-container"},R=s("h1",{class:"variables-title"},"Environment variables",-1),B={class:"variables-main-content",autocomplete:"off"},G={class:"variables-section-container"},M=s("label",{class:"variables-label"},"Skip autoupdate docker images",-1),U={class:"variables-checkbox-container"},D={class:"variables-section-title"},H={class:"variables-label"},W=["onUpdate:modelValue","onInput"],z={key:0,class:"tooltiptext"};function Q(e,i,n,d,a,t){const l=b("LoadingSpinner"),v=b("InstallationStep");return c(),h(p,null,[m(l,{isLoading:a.isLoadingVariables,text:"Loading environment variables"},null,8,["isLoading"]),m(v,{steps:a.steps,tips:a.tips,navigation:t.navigation},{default:L(()=>[s("div",F,[R,s("form",B,[s("div",G,[M,s("div",U,[f(s("input",{type:"checkbox",class:"variables-checkbox","onUpdate:modelValue":i[0]||(i[0]=o=>t.skipImagesAutoupdate=o)},null,512),[[N,t.skipImagesAutoupdate]])])]),(c(!0),h(p,null,_(t.variables,(o,V)=>(c(),h("div",{key:V},[s("h2",D,g(o.name),1),(c(!0),h(p,null,_(o.variables,(Y,r)=>(c(),h("div",{key:r,class:"variables-section-container"},[s("label",H,g(r),1),f(s("input",{"onUpdate:modelValue":u=>o.variables[r]=u,type:"text",class:"variables-input",onInput:u=>t.isPortOk(r,o.variables[r])},null,40,W),[[$,o.variables[r]]]),a.portsNotOk.get(r)?(c(),h("span",z,"This port is not available, please choose another port")):A("",!0)]))),128))]))),128))])])]),_:1},8,["steps","tips","navigation"])],64)}const J=k(C,[["render",Q]]);export{J as default};
